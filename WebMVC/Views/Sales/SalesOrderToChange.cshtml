@model EndpointResult<IEnumerable<SalesOrderViewModel>>

<div class="content-wrapper">
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>@ViewData["Title"]</h1>
                </div>
            </div>
        </div>
    </section>

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card card-info">
                        <div class="card-header">
                            <h3 class="card-title">Order Header</h3>
                        </div>
                        <div class="card-body">
                            <div class="form-group row">
                                <label for="customerName" class="col-sm-2 col-form-label">Customer Name</label>
                                <div class="col-sm-4">
                                    <input type="text" class="form-control" id="customerName" name="customerName" value="@Model.Data.FirstOrDefault().CustomerName">
                                </div>
                                <label for="orderType" class="col-sm-2 col-form-label">Order Type</label>
                                <div class="col-sm-4">
                                    <select class="form-control select2" id="select_orderType" name="orderType">
                                    </select>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="customerAddress" class="col-sm-2 col-form-label">Customer Address</label>
                                <div class="col-sm-4">
                                    <textarea class="form-control" id="customerAddress" name="customerAddress" rows="3">@Model.Data.FirstOrDefault().CustomerAddress</textarea>
                                </div>
                                <label for="paymentType" class="col-sm-2 col-form-label">Payment Type</label>
                                <div class="col-sm-4">
                                    <select class="form-control select2" id="select_paymentType" name="paymentType">
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Order Details</h3>
                        </div>

                        <div class="card-body">
                            <div id="orderDetailGrid" style="overflow: visible"></div>
                        </div>

                        <div class="card-footer">
                            <button type="submit" id="updateBtn" class="btn btn-primary float-right">Update</button>
                            <button type="submit" id="backBtn" class="btn btn-primary float-right" onclick="history.back()">Back</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

@section Styles{
}

@section Scripts{
    <script>
        var order = {};
        var orderItem = new Array();
        var jsGridCustomDateTimeField = function (config) {
            jsGrid.Field.call(this, config);
        };

        jsGridCustomDateTimeField.prototype = new jsGrid.Field({
            sorter: function (date1, date2) {
                return new Date(date1) - new Date(date2);
            },

            itemTemplate: function (value) {
                if (value === null) {
                    return '';
                } else {
                    return moment(value).format('DD/MM/YYYY');
                }
            },

            insertTemplate: function (value) {
                this._insertPicker = $('<input>').datetimepicker({
                    format: 'DD/MM/YYYY',
                    date: moment(),
                    widgetPositioning: {
                        horizontal: 'auto',
                        vertical: 'auto'
                    },
                    minDate: new Date(),
                    icons: {
                        time: 'fa fa-clock-o',
                        date: 'fa fa-calendar',
                        up: 'fa fa-chevron-up',
                        down: 'fa fa-chevron-down',
                        previous: 'fa fa-chevron-left',
                        next: 'fa fa-chevron-right',
                        today: 'fa fa-check',
                        clear: 'fa fa-trash',
                        close: 'fa fa-times'
                    }
                });

                this._insertPicker.data('DateTimePicker').date(moment());
                return this._insertPicker;
            },

            editTemplate: function (value) {
                this._editPicker = $('<input>').datetimepicker({
                    format: 'DD/MM/YYYY',
                    widgetPositioning: {
                        horizontal: 'auto',
                        vertical: 'auto'
                    },
                    minDate: new Date(),
                    icons: {
                        time: 'fa fa-clock-o',
                        date: 'fa fa-calendar',
                        up: 'fa fa-chevron-up',
                        down: 'fa fa-chevron-down',
                        previous: 'fa fa-chevron-left',
                        next: 'fa fa-chevron-right',
                        today: 'fa fa-check',
                        clear: 'fa fa-trash',
                        close: 'fa fa-times'
                    }
                });

                if (value !== null) {
                    this._editPicker.data('DateTimePicker').defaultDate(moment(value));
                    this._editPicker.data('DateTimePicker').date(moment(value));
                }
                return this._editPicker;
            },

            insertValue: function () {
                var insertValue = this._insertPicker.data('DateTimePicker').date();
                if (typeof insertValue !== 'undefined' && insertValue !== null) {
                    return insertValue.format('MM/DD/YYYY');
                } else {
                    return null;
                }
            },

            editValue: function () {
                var editValue = this._editPicker.data('DateTimePicker').date();
                if (typeof editValue !== 'undefined' && editValue !== null) {
                    return editValue.format('MM/DD/YYYY');
                } else {
                    return null;
                }
            }
        });

        jsGrid.fields.jsGridCustomDateTimeField = jsGridCustomDateTimeField;

        GetOrderTypes();
        GetPaymentTypes();
        GetAndSetOrderTypes(@Model.Data.FirstOrDefault().OrderTypeId);
        GetAndSetPaymentTypes(@Model.Data.FirstOrDefault().PaymentTypeId);
        GetProducts().then((data) => {
            $("#orderDetailGrid").jsGrid({
                height: "300px",
                width: "100%",

                paging: false,
                inserting: true,
                editing: true,

                deleteConfirm: "Are you sure do you want to delete this item?",

                controller: {
                    insertItem: function (item) {
                        orderItem.push(item);
                    },
                    deleteItem: function (item) {
                        let arrIdx = orderItem.indexOf(item);
                        if (arrIdx > -1) {
                            orderItem.splice(arrIdx, 1);
                        }
                    }
                },

                fields: [
                    {
                        title: "Product", name: "productId", type: "select", items: data, valueField: "id", textField: "name", validate: "required",
                        insertTemplate: function () {
                            var grid = this._grid;
                            var insertResult = jsGrid.fields.select.prototype.insertTemplate.call(this, arguments);

                            insertResult.on("change", function () {
                                const selectedValue = insertResult.val();
                                if (selectedValue != 0) {
                                    const product = GetSelectedProduct(selectedValue);
                                    grid.option("fields")[2].insertControl.val(product.price);
                                }
                                else {
                                    grid.option("fields")[2].insertControl.val(0);
                                }
                            });
                            return insertResult;
                        },
                        editTemplate: function (value) {
                            var grid = this._grid;
                            var editResult = jsGrid.fields.select.prototype.editTemplate.call(this, value);

                            editResult.on("change", function () {
                                const selectedValue = editResult.val();
                                if (selectedValue != 0) {
                                    const product = GetSelectedProduct(selectedValue);
                                    grid.option("fields")[2].editControl.val(product.price);

                                }
                                else {
                                    grid.option("fields")[2].editControl.val(0);
                                }
                            });
                            return editResult;
                        },
                    },
                    { title: "Quantity", name: "quantity", type: "number", validate: "required" },
                    { title: "Price", name: "price", type: "number", width: 50, validate: "required" },
                    { title: "Delivery Date", name: "deliveryDate", type: "jsGridCustomDateTimeField", width: 50, validate: "required" },
                    { title: "Note", name: "note", type: "text", width: 200 },
                    { type: "control", align: "center" }
                ]
            });
        });

        $("#updateBtn").click(function (e) {
            var d = $.Deferred();
            order["orderDate"] = moment()._d.toLocaleDateString();
            order["customerName"] = document.getElementById("customerName").value;
            order["customerAddress"] = document.getElementById("customerAddress").value;
            order["orderTypeId"] = document.getElementById("select_orderType").value;
            order["paymentTypeId"] = document.getElementById("select_paymentType").value;
            order["orderDetails"] = orderItem;

            if (order["customerName"] != "" && order["customerAddress"] != "" && order["orderTypeId"] > 0 && order["paymentTypeId"] > 0 && order["orderDetails"].length > 0) {
                $.ajax({
                    type: "POST",
                    url: "../Sales/UpdateSalesOrder",
                    data: order,
                    dataType: "json"
                }).done(function (response) {
                    d.resolve(response.data);
                    $(function () { Swal.fire({ icon: 'success', title: 'Success!', text: 'Sales order has been updated successfully.' }).then(() => { window.location.reload(); }); });
                }).fail(function (response) {
                    $(function () { Swal.fire({ icon: 'error', title: 'Error!', text: response.data.message }) });
                });
            }
            else {
                $(function () { Swal.fire({ icon: 'error', title: 'Error!', text: "Invalid sales order input." }) });
            }

            return d.promise();
        });
    </script>
}